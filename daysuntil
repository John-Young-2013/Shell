#!/bin/bash
# daysuntil--Basically, this is the daysago script backward, where the
#  desired date is set as the current date and the current date is used
#  as the basis of the daysago caculation.
# As in the previous script, use 'which gdate' if you are on OS X.
#  If you're on Linux, use 'which date'.
# date="$(which date)"

daysInMonth(){
case $1 in
	1|3|5|7|8|10|12) dim=31;; # Most common value
	4|6|9|11) dim=30;; #
	2)dim=29;; # Depending on whether it's a leap year
	*)dim=-1;; # Unknown month
esac
}

isleap(){
# Returns nonzero value for $leapyear if $1 was a leap year
rem=$(($1 % 400))
if [ $rem -eq 0 ];then
	leapyear=True
else
	rem=$(($1 % 4))
	rem2=$(($1 % 100))
	if [ $rem -eq 0 -a $rem2 -ne 0 ];then
		leapyear=True
	else
		leapyear=""
	fi
fi
#leapyear=$(date -d "12/31/$1" +%j | grep 366)
}
#######################
#### Main block
#######################

if [ $# -ne 3 ];then
	echo "Usage: $(basename $0) mon day year"
	echo " with just numerical values (ex: 7 7 1776)"
	exit 1
fi

date --version >/dev/null 2>&1
if [ $? -ne 0 ];then
	echo "Sorry, but $(basename $0) can't run without GNU date." >&2
	exit 1
fi
eval $(date "+thismon=%m;thisday=%d;thisyear=%Y;dayofyear=%j")
endmon=$1; endday=$2; endyear=$3
# Lots of parameter checks needed ...
daysInMonth $endmon # sets global var dim.

if [ $endday -lt 0 -o $endday -gt $dim ];then
	echo "Invalid: Month #$endmon only has $dim days." >&2
	exit 1
fi

if [ $endmon -eq 2 -a $endday -eq 29 ];then
	isleap $endyear
	if [ -z "$leapyear" ];then
		echo "Invalid: $endyear wasn't a leap year; February had 28 days." >&2
		exit 1
	fi
fi

if [ $endyear -lt $thisyear ];then
	echo "Invalid: $endmon/$endday/$endyear is prior to the current year." >&2
	exit 1
elif [ $endyear -eq $thisyear -a $endmon -lt $thismon ];then
	echo "Invalid: $endmon/$endday/$endyear is prior to the current month." >&2
	exit 1
elif [ $endyear -eq $thisyear -a $endmon -eq $thismon -a $endday -lt $thisday ];then
	echo "Invalid: $endmon/$endday/$endyear is prior to the current date." >&2
	exit 1
elif [ $endyear -eq $thisyear -a $endmon -eq $thismon -a $endday -eq $thisday ];then
	echo "There're zero days between $endmon/$endday/$endyear and today." >&2
	exit 0
fi
### If we're working with the same year, the calculation is a bit different.
if [ $endyear -eq $thisyear ];then
	totaldays=$((10#$(date -d "$endmon/$endday/$endyear" +%j) - 10#$(date +%j)))
else
	### Calculate this in chunks, starting with days left in this year.
	### days left in start year
	# calculate the date string format for the specified starting date.
	thisdatefmt="$thismon/$thisday/$thisyear"
	calculate=$((10#$(date -d "12/31/$thisyear" +%j) - 10#$(date -d $thisdatefmt +%j)))
	daysleftinyear=$calculate
	### days in intervening years
	daysbetweenyears=0
	tempyear=$(( $thisyear + 1))
	while [ $tempyear -lt $endyear ];do
		daysbetweenyears=$(( 10#$daysbetweenyears + 10#$(date -d "12/31/$tempyear" +%j) ))
		tempyear=$(( $tempyear + 1))
	done

	### Days in end year

	dayofyear=$((10#$(date -d "$endmon/$endday/$endyear" +%j))) # That's easy !
	### Now add it all up
	totaldays=$(( 10#$daysleftinyear + 10#$daysbetweenyears + 10#$dayofyear ))
fi
echo "There are $totaldays days until the date $endmon/$endday/$endyear."
exit 0
